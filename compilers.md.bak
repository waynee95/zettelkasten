---
title: Compilers
date: 2023-03-10
---

## Overview

- Compiler = program that accepts as input a program text in a _source language_
  and produces as output a program text in a _target language_
  - This process is called _translation_
  - Quite often the source and target language are vastly different
    - Source language = high-level programming language
    - Targt language = low-level language or assembly
  - The compiler itself is written in the _implementation language_
- The part of the compiler that does the _analysis_ of the source program is called _frontend_
  and the part of the compiler that does the _synthesis_ of the target language is called _backend_
  - Frontend and backend work separately of each other and only share the interface
    of the semantic representation
- If the code generating backend is replaced by an interpreting backend, then
  we have an _interpreter_

<p align="center">
  <img src="static/compiler-blackbox.svg" alt="Compiler Overview">
</p>

## Why study Compiler Construction?

- Encompasses many different fields of computer science:
  - Formal languages (regular expressions, context-free languages)
  - Programming langauges (syntax, semantics, pragmatics)
  - Algorithms and data structures ([[abstract-syntax-tree]]#, [[symbol-tables]]#, instruction selection, optimization)
  - Logic (type systems, program analysis)
  - Computer architecture (machine code)
  - Software Engineering (phase slicing, versioning, testing)

## Organization of a Compiler

<p align="center">
  <img src="static/compiler-overview.svg" alt="Compiler Overview">
</p>

- Compilers are _syntax-directed_
  - The compilation process is driven by the _syntactic_ structure of the source
    program
  - Most compiler translate the structure of the source program into an
    [[abstract-syntax-tree]]# (AST) that omits unnecessary syntactic
    details
  - The parser builds the AST from a list of _tokens_
- Recognition of the syntactic structure is the main part of the syntax analysis
  phase
- Semantic analysis analyses the semantics (meaning) of the source program
  - This finishes the analysis phase by verifiying some correctness properties
    (type and scope rules) and begins the synthesis phase
- In the synthesis phase, the source language constructs are translated into an
  [[intermediate-rep]]# (IR)
  - Some compilers might generate code directly without using an IR

TODO: highlevel overview of each of the different phases

# References

- Modern Compiler Design, 2nd ed, by Grune et al.
- Crafting a Compiler, 2nd ed, by Fisher et al.
